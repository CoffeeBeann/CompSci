     1                                  ; Filename: shellcode.asm
     2                                  ; Author: MIDN 2/C Ian Coffey (m261194)
     3                                  
     4                                  ; Compilation Instructions...
     5                                  ; nasm -felf64 shellcode.asm -o shellcode.o
     6                                  ; ld shellcode.o -o shellcode
     7                                  ; ./shellcode 
     8                                  
     9                                  bits 64 
    10                                  
    11                                  section .text
    12                                      global _start
    13                                  
    14                                  _start:
    15 00000000 4831C0                      xor rax, rax
    16 00000003 48FFC0                      inc rax
    17 00000006 48FFC0                      inc rax
    18 00000009 BF5877696E                  mov edi, "Xwin"
    19 0000000E C1EF08                      shr edi, 8
    20 00000011 57                          push rdi
    21 00000012 4889E7                      mov rdi, rsp
    22 00000015 4831F6                      xor rsi, rsi
    23 00000018 4831D2                      xor rdx, rdx
    24 0000001B 0F05                        syscall
    25                                  
    26                                      ; Store fd in r8
    27 0000001D 4989C0                      mov r8, rax
    28                                  
    29                                      ; Copy cat starting from here
    30                                      ; Read file to stdout
    31 00000020 4831DB                      xor rbx, rbx  ; zero out rbx to prevent null bytes
    32                                                    ; rbx will be used to cmp to rax
    33 00000023 48FFC3                      inc rbx       ; rbx = 1
    34 00000026 4831C9                      xor rcx, rcx  ; zero out rcx to prevent null bytes 
    35                                                    ; rcx will be used to allocate memory
    36 00000029 48FFC1                      inc rcx       ; rcx = 1
    37 0000002C 4831D2                      xor rdx, rdx  ; zero out rdx to prevent null bytes
    38                                                    ; rdx is used as read size in syscall
    39 0000002F 48FFC2                      inc rdx       ; rdx = 1
    40                                      
    41                                  ; Loop & write loop until rax = 0 (EOF thrown)
    42                                  _loop:
    43                                      ; Allocate 1 byte of memory on stack
    44 00000032 4829CC                      sub rsp, rcx
    45                                  
    46                                      ; Setup syscall
    47 00000035 4C89C7                      mov rdi, r8   ; rdi = 'win'
    48 00000038 4889E6                      mov rsi, rsp  ; location of buffer
    49 0000003B 4831C0                      xor rax, rax  ; 0 = read(win, buffer, rdx=1)
    50 0000003E 0F05                        syscall       ; call read()
    51                                      
    52                                      ; Check if 0 (EOF) is in rax
    53 00000040 4839D8                      cmp rax, rbx
    54 00000043 7511                        jne exit
    55 00000045 480F1FC0                    nop rax       ; NOP to scew null bytes
    56                                  
    57                                      ; Setup syscall for write
    58 00000049 4831FF                      xor rdi, rdi  ; rdi = 0
    59 0000004C 48FFC7                      inc rdi       ; stdout = 1 
    60 0000004F 0F05                        syscall       ; 1 = write(stdout, buffer, rdx=1)
    61                                      
    62                                      ; Deallocate 1 byte from the stack
    63 00000051 4801CC                      add rsp, rcx
    64 00000054 EBDC                        jmp _loop
    65                                  
    66                                  exit:
    67 00000056 4801E6                      add rsi, rsp  ; Reset stack and return
    68 00000059 4831C0                      xor rax, rax  ; rax = 0
    69 0000005C 48FFC0                      inc rax       ; rax = 1
    70 0000005F 48FFC0                      inc rax       ; rax = 2
    71 00000062 48C1E005                    shl rax, 5    ; rax = 64
    72 00000066 4883E804                    sub rax, 4    ; rax = 60
    73 0000006A 4831FF                      xor rdi, rdi  ; rdi = 0
    74 0000006D 0F05                        syscall       ; exit(0)
    75                                  
    76                                  
    77                                      
